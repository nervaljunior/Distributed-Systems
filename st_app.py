import streamlit as st 
import pandas as pd
import matplotlib.pyplot as plt
from io import StringIO
from sklearn.preprocessing import MinMaxScaler
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Fun√ß√£o para carregar dados
@st.cache_data
def carregar_dados(caminho):
    return pd.read_csv(caminho, index_col=0, parse_dates=True)

# Classe para modelar o sistema de energia
class EnergyModel:
    def __init__(self, pv=None, importacao=None, exportacao=None):
        self.pv = pv if pv is not None else 0
        self.importacao = importacao if importacao is not None else 0
        self.exportacao = exportacao if exportacao is not None else 0

    def calcular_cargas(self):
        # Caso n√£o haja PV, a carga ser√° igual √† importa√ß√£o
        if self.pv == 0:
            return self.importacao
        return self.pv + self.importacao - self.exportacao

    def balanco_energetico(self):
        cargas = self.calcular_cargas()
        return {
            "PV": self.pv,
            "Importa√ß√£o": self.importacao,
            "Exporta√ß√£o": self.exportacao,
            "Cargas": cargas
        }

# Fun√ß√£o para classificar o dia
def classificar_dia(df):
    total_importacao = df.get("grid_import", pd.Series(0)).sum()
    total_exportacao = df.get("grid_export", pd.Series(0)).sum()
    total_pv = df.get("pv", pd.Series(0)).sum()
    total_cargas = df.get("Cargas Calculadas", pd.Series(0)).sum()


    if total_exportacao > total_cargas:
        return "üü¢ Alta Exporta√ß√£o"
    elif total_importacao > total_pv:
        return "üî¥ Alta Importa√ß√£o"
    else:
        return "üü° Equil√≠brio (Balan√ßo Est√°vel)"

# Processar dados
def processar_dados(df):
    resultados = []
    for _, row in df.iterrows():
        modelo = EnergyModel(
            pv=row.get('pv', 0),
            importacao=row.get('grid_import', 0),
            exportacao=row.get('grid_export', 0)
        )
        resultado = modelo.balanco_energetico()
        resultados.append(resultado)
    df['Cargas Calculadas'] = [r['Cargas'] for r in resultados]
    if 'Grid Balance' not in df.columns:
        df['Grid Balance'] = df['grid_import'] - df['grid_export']

    return df

# Treinamento do modelo LSTM
def treinar_modelo_lstm(dados):
    scaler = MinMaxScaler()
    dados_scaled = scaler.fit_transform(dados.values.reshape(-1, 1))
    X, y = [], []
    for i in range(7, len(dados_scaled)):
        X.append(dados_scaled[i-7:i])
        y.append(dados_scaled[i])
    X, y = np.array(X), np.array(y)

    modelo = Sequential([
        LSTM(50, activation='relu', input_shape=(X.shape[1], 1)),
        Dense(1)
    ])
    modelo.compile(optimizer='adam', loss='mse')
    modelo.fit(X, y, epochs=20, verbose=0)
    return modelo, scaler


# Prever consumo
def prever_consumo(modelo, dados, scaler):
    dados_scaled = scaler.transform(dados[-7:].values.reshape(-1, 1))
    entrada = dados_scaled.reshape(1, 7, 1)
    previsao_scaled = modelo.predict(entrada, verbose=0)
    return scaler.inverse_transform(previsao_scaled)[0, 0]

# Layout de bot√µes
col1, col2, col3 = st.columns(3)
if col1.button("‚ñ∂Ô∏è Executar"):
    st.write("A√ß√£o: Executar")
if col2.button("‚è∏Ô∏è Pausar"):
    st.write("A√ß√£o: Pausar")
if col3.button("‚èπÔ∏è Parar"):
    st.write("A√ß√£o: Parar")


# Abas de Navega√ß√£o
tab = st.selectbox("Dia da Semana", ["Domingo", "Segunda", "Ter√ßa", "Quarta", "Quinta", "Sexta", "S√°bado"])


# Gr√°fico de Consumo e Previs√£o
def exibir_grafico(df, modelo, scaler):
    st.subheader("Consumo Real vs Previs√£o")
    fig, ax = plt.subplots()
    x = np.arange(len(df))
    y_real = df['Cargas Calculadas'].values
    y_previsto = [prever_consumo(modelo, df['Cargas Calculadas'][:i+1], scaler) for i in range(7, len(df))]

    ax.plot(x, y_real, label="Consumo Real", color='red')
    ax.plot(x[7:], y_previsto, label="Previs√£o", color='blue', linestyle='dashed')
    ax.set_xlabel("Tempo")
    ax.set_ylabel("Consumo (kW)")
    ax.legend()
    st.pyplot(fig)

# Plotar dados com verifica√ß√µes
def plotar_dados(df, modelo, scaler):
    fig, ax = plt.subplots(figsize=(12, 6))

    if 'grid_import' in df.columns:
        ax.plot(df.index, df["grid_import"], label="Importa√ß√£o", color="blue")
    if 'grid_export' in df.columns:
        ax.plot(df.index, df["grid_export"], label="Exporta√ß√£o", color="orange")
    if 'pv' in df.columns:
        ax.plot(df.index, df["pv"], label="PV", color="green")
    if 'Cargas Calculadas' in df.columns:
        ax.plot(df.index, df["Cargas Calculadas"], label="Cargas Calculadas", color="red")
    if 'Grid Balance' in df.columns:
        ax.plot(df.index, df["Grid Balance"], label="Balan√ßo da Rede", linestyle="--", color="purple")

    if modelo:
        previsoes = []
        for i in range(7, len(df)):
            previsoes.append(prever_consumo(modelo, df["Cargas Calculadas"][:i], scaler))
        ax.plot(df.index[7:], previsoes, label="Previs√£o LSTM", color="cyan", linestyle="dashed")

    ax.set_title("Consumo e Gera√ß√£o de Energia")
    ax.set_xlabel("Tempo")
    ax.set_ylabel("Energia (kW)")
    ax.legend()
    st.pyplot(fig)


# Configura√ß√£o do Streamlit
st.title("An√°lise de Consumo e Gera√ß√£o de Energia Residencial")

# Carregar dados
caminho_dados = './data/potencia_residential_data.csv'
df = carregar_dados(caminho_dados)

# Sidebar para sele√ß√£o de resid√™ncia e intervalo
df['DataHora'] = df.index
residencias = [col.split("_")[0] for col in df.columns if "residential" in col]
residencia_selecionada = st.sidebar.selectbox("Selecione a Resid√™ncia", list(set(residencias)))
data_inicio = st.sidebar.date_input("Data de In√≠cio", df.index.min().date())
data_fim = st.sidebar.date_input("Data de Fim", df.index.max().date())

# Filtrar dados com base na sele√ß√£o
df_residencia = df[[col for col in df.columns if col.startswith(residencia_selecionada)]].copy()
df_residencia.columns = [col.replace(f"{residencia_selecionada}_", "") for col in df_residencia.columns]
df_residencia = df_residencia.loc[data_inicio:data_fim]

# Processar os dados
try:
    df_residencia = processar_dados(df_residencia)

    # Exibir balan√ßo energ√©tico
    st.subheader("Balan√ßo Energ√©tico")
    pv = df_residencia.get('pv', pd.Series(0)).sum()  # Usar 0 se 'pv' n√£o existir
    importacao = df_residencia.get('grid_import', pd.Series(0)).sum()
    exportacao = df_residencia.get('grid_export', pd.Series(0)).sum()
    modelo_energia = EnergyModel(pv=pv, importacao=importacao, exportacao=exportacao)
    balanco = modelo_energia.balanco_energetico()

    for key, value in balanco.items():
        st.write(f"{key}: {value}")

    # Classificar dia
    st.subheader("Classifica√ß√£o do Dia")
    classificacao = classificar_dia(df_residencia)
    st.write(f"Classifica√ß√£o: {classificacao}")

    # Gr√°fico de barras para categorias
    st.subheader("Gr√°fico de Consumo e Gera√ß√£o por Categoria")
    fig, ax = plt.subplots()
    df_residencia.sum().plot(kind="bar", ax=ax, color=["blue", "orange", "green", "red"])
    ax.set_title("Consumo e Gera√ß√£o")
    ax.set_ylabel("Energia (kW)")
    ax.set_xlabel("Categorias")
    st.pyplot(fig)

    # Gr√°ficos de linha para importa√ß√£o, exporta√ß√£o, cargas e PV
    st.subheader("Gr√°ficos de Linha: Importa√ß√£o, Exporta√ß√£o, Cargas e PV")
    fig, ax = plt.subplots()

    # Verificar se a coluna 'pv' existe
    if 'pv' in df_residencia.columns:
        df_residencia[['grid_import', 'grid_export', 'Cargas Calculadas', 'pv']].plot(ax=ax)
        ax.legend(['Importa√ß√£o', 'Exporta√ß√£o', 'Cargas Calculadas', 'Gera√ß√£o PV'])
    else:
        df_residencia[['grid_import', 'grid_export', 'Cargas Calculadas']].plot(ax=ax)
        ax.legend(['Importa√ß√£o', 'Exporta√ß√£o', 'Cargas Calculadas'])

    ax.set_title("Importa√ß√£o, Exporta√ß√£o, Cargas e Gera√ß√£o PV ao Longo do Tempo")
    ax.set_ylabel("Energia (kWh)")
    ax.set_xlabel("Tempo")
    st.pyplot(fig)
    
    

    
        # Treinar modelo LSTM e exibir gr√°ficos
    if st.button("Treinar Modelo e Exibir Gr√°ficos"):
        modelo, scaler = treinar_modelo_lstm(df_residencia["Cargas Calculadas"])
        plotar_dados(df_residencia, modelo, scaler)
    else:
        plotar_dados(df_residencia, None, None)

except Exception as e:
    st.error(f"Erro ao processar os dados: {e}")
